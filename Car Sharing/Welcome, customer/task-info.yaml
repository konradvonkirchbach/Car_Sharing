type: edu
custom_name: Welcome, customer!
files:
  - name: src/carsharing/Main.java
    visible: true
    text: |-
      package carsharing;
      
      import carsharing.utils.ArgumentExtractor;
      import carsharing.utils.CompanyTableCreator;
      
      public class Main {
      
          public static void main(String[] args) {
              try {
                  CompanyTableCreator.createDb(ArgumentExtractor.getDbName(args));
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
      
          }
      }
    learner_created: false
  - name: test/DatabaseUtil.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.sql.*;
      import java.util.HashMap;
      
      public class DatabaseUtil {
      
          private Connection connection = null;
          private static final String databaseFilePath = "./src/carsharing/db/carsharing";
      
          public Connection getConnection() {
              if (connection != null) {
                  return connection;
              }
              try {
                  connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't connect to the database.");
              }
              return connection;
          }
      
          public void closeConnection() {
              if (connection != null) {
                  try {
                      connection.close();
                  } catch (SQLException ignored) {
                      System.out.println(ignored.getErrorCode());
                      throw new WrongAnswer("Can't close connection to the database.");
                  }
                  connection = null;
              }
          }
      
          public ResultSet executeQuery(String query) {
              try {
                  return getConnection().createStatement().executeQuery(query);
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public boolean ifTableExist(String tableName) {
              try {
                  tableName = tableName.toUpperCase();
                  ResultSet resultSet = executeQuery("SHOW TABLES");
                  while (resultSet.next()) {
                      if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                          return true;
                      }
                  }
                  return false;
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void ifColumnsExist(String tableName, String[][] columns) {
              try {
                  ResultSet resultSet = getConnection()
                          .createStatement()
                          .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());
      
                  HashMap<String, String> correctColumns = new HashMap<>();
                  for (String[] column : columns) {
                      correctColumns.put(column[0], column[1]);
                  }
      
                  while (resultSet.next()) {
                      String columnName = resultSet.getString("FIELD");
                      if (correctColumns.containsKey(columnName)) {
                          if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                              throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                      + "' column should be of " + correctColumns.get(columnName) + " type.");
                          }
                          correctColumns.remove(columnName);
                      }
                  }
                  if (!correctColumns.isEmpty()) {
                      throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void clearCompanyTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM COMPANY");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the COMPANY table.");
              }
          }
      
          public void clearCarTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CAR");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CAR table.");
              }
          }
      
          public void clearCustomerTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CUSTOMER");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
              }
          }
      
          public void checkCompany(String name) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
              }
          }
      
          public void checkCar(String companyName, String carName) {
              try {
                  PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  companyStatement.setString(1, companyName);
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
      
                  ResultSet resultSet = companyStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                  }
      
                  int id = resultSet.getInt("ID");
      
                  resultSet = carStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
                  if (resultSet.getInt("COMPANY_ID") != id) {
                      throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCustomer(String name, String carName) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
      
                  if (carName == null) {
                      if (resultSet.getString("RENTED_CAR_ID") != null) {
                          throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                      }
                      return;
                  }
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
                  ResultSet carResultSet = carStatement.executeQuery();
      
                  if (!carResultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
      
                  int carId = carResultSet.getInt("ID");
      
                  if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                      throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
              }
          }
      
      
          public void checkCompanyColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCarColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCustomerColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      }
    learner_created: false
  - name: test/CarSharingTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.BeforeClass;
      
      import java.io.File;
      
      public class CarSharingTest extends StageTest<Void> {
      
          private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
          private static DatabaseUtil db = new DatabaseUtil();
      
          @BeforeClass
          public static void deleteDatabaseFile() {
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return;
              }
      
              if (!file.delete()) {
                  throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                      "Make sure you close all the connections with the database file!");
              }
          }
      
          @DynamicTest(order = 1)
          public CheckResult test2_ifDatabaseExist() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              program.execute("0");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
              }
      
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                      " and located in /carsharing/db/ folder.\n" +
                      "The file should be created right after starting the program!");
              }
      
              return correct();
          }
      
          @DynamicTest(order = 2)
          public CheckResult test1_testMenu() {
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("Start menu should contain \"0. Exit\"");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Company list")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
              }
      
              if (!output.contains("2. Create a company")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
              }
      
              if (!output.contains("0. Back")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("0");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          public CheckResult test3_checkDatabaseConnection() {
              db.getConnection();
              return correct();
          }
      
          @DynamicTest(order = 4)
          public CheckResult test4_checkIfTableExists() {
              if (!db.ifTableExist("company")) {
                  return wrong("Can't find table named 'company'");
              }
              if (!db.ifTableExist("car")) {
                  return wrong("Can't find table named 'car'");
              }
              return correct();
          }
      
          @DynamicTest(order = 5)
          public CheckResult test5_checkTableColumns() {
              String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
              db.ifColumnsExist("company", companyColumns);
              db.checkCompanyColumnProperties();
      
              String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
              db.ifColumnsExist("car", carColumns);
              db.checkCarColumnProperties();
      
              String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
              db.ifColumnsExist("customer", customerColumns);
              db.checkCustomerColumnProperties();
              return correct();
          }
      
          @DynamicTest(order = 6)
          public CheckResult test6_testAddCompany() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
      
              db.clearCustomerTable();
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              String output = program.execute("1");
      
              if (!output.contains("The company list is empty")) {
                  return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the company name")) {
                  return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                      "Your output should contain 'Enter the company name:'");
              }
      
              program.execute("Super company");
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'");
              }
      
              db.checkCompany("Super company");
      
              program.execute("0\n2\nAnother company");
              program.execute("2\nOne more company");
      
              db.checkCompany("Another company");
              db.checkCompany("One more company");
      
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected 'Super company' company.\n" +
                      "Your output should contain '1. Super company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Another company")) {
                  return wrong("In the company list expected 'Another company' company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("3. One more company")) {
                  return wrong("In the company list expected 'One more company' company.\n" +
                      "Your output should contain '2. One more company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              program.execute("2");
      
              return correct();
          }
      
          @DynamicTest(order = 7)
          public CheckResult test7_testAddCar() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              String output;
      
              db.clearCarTable();
              db.clearCompanyTable();
              db.clearCustomerTable();
      
              program.execute("1");
              program.execute("2");
              program.execute("Car To Go");
              program.execute("2");
              program.execute("Drive Now");
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected 'Car To Go' company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected 'Drive Now' company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Car list")) {
                  return wrong("After choosing company you should print menu that contains '1. Car list' item");
              }
      
              if (!output.contains("2. Create a car")) {
                  return wrong("After choosing company you should print menu that contains '2. Create a car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing company you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the car name:")) {
                  return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                      "Your output should contain 'Enter the car name:'");
              }
      
              program.execute("Hyundai Venue");
              db.checkCar("Car To Go", "Hyundai Venue");
      
              program.execute("2");
              program.execute("Maruti Suzuki Dzire");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              program.execute("0");
      
              program.execute("1");
              program.execute("2");
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              program.execute("2");
              program.execute("Lamborghini Urraco");
      
              output = program.execute("1");
      
              if (!output.contains("1. Lamborghini Urraco")) {
                  return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                      "Your output should contain '1. Lamborghini Urraco'");
              }
      
              if (output.contains("Hyundai Venue")) {
                  return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
              }
      
              if (output.contains("Maruti Suzuki Dzire")) {
                  return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
              }
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          @DynamicTest(order = 8)
          public CheckResult test8_testAddCustomer() {
      
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              db.clearCustomerTable();
      
              if (!output.contains("2. Log in as a customer")) {
                  return wrong("Start menu should contain \"2. Log in as a customer\"");
              }
      
              if (!output.contains("3. Create a customer")) {
                  return wrong("Start menu should contain \"3. Create a customer\"");
              }
      
              output = program.execute("2");
      
              if (!output.contains("The customer list is empty!")) {
                  return wrong("If no customers were created you should print 'The customer list is empty!'");
              }
      
              output = program.execute("3");
      
              if (!output.contains("Enter the customer name:")) {
                  return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                      "Your output should contain 'Enter the customer name:'");
              }
      
              program.execute("First customer");
              db.checkCustomer("First customer", null);
      
              program.execute("3");
              output = program.execute("Second customer");
              db.checkCustomer("Second customer", null);
      
              if (!output.contains("2. Log in as a customer")) {
                  return wrong("After creating a customer you should print main menu again.\n" +
                      "Your output should contain '2. Log in as a customer'");
              }
      
              output = program.execute("2");
      
      
              if (!output.contains("1. First customer")) {
                  return wrong("In the customer list expected 'First customer' customer.\n" +
                      "Your output should contain '1. First customer'\n" +
                      "Customers should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Second customer")) {
                  return wrong("In the customer list expected 'Second customer' customer.\n" +
                      "Your output should contain '2. Second customer'\n" +
                      "Customers should be sorted by 'ID' column");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Rent a car")) {
                  return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
              }
      
              if (!output.contains("2. Return a rented car")) {
                  return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
              }
      
              if (!output.contains("3. My rented car")) {
                  return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
              }
      
              output = program.execute("3");
      
              if (!output.contains("You didn't rent a car!")) {
                  return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
              }
      
              output = program.execute("2");
      
              if (!output.contains("You didn't rent a car!")) {
                  return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
              }
      
              return correct();
          }
      
          @DynamicTest(order = 9)
          public CheckResult test9_testRentCar() {
      
              TestedProgram program = new TestedProgram();
              String output;
              program.start("-databaseFileName", "carsharing");
      
              db.checkCustomer("First customer", null);
              db.checkCustomer("Second customer", null);
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
              db.checkCar("Car To Go", "Hyundai Venue");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              program.execute("2");
              program.execute("1");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected 'Car To Go' company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected 'Drive Now' company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              output = program.execute("1");
      
              if (!output.contains("You rented 'Hyundai Venue'")) {
                  return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
              }
      
              db.checkCustomer("First customer", "Hyundai Venue");
      
              if (!output.contains("3. My rented car")) {
                  return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
              }
      
              output = program.execute("3");
      
              if (!output.contains("Hyundai Venue")) {
                  return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
              }
      
              if (!output.contains("Car To Go")) {
                  return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("You've already rented a car!")) {
                  return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("You've returned a rented car!")) {
                  return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
              }
      
              db.checkCustomer("First customer", null);
      
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          @DynamicTest(order = 10)
          public CheckResult test10_testRentedCarInList() {
      
              TestedProgram program = new TestedProgram();
              String output;
              program.start("-databaseFileName", "carsharing");
      
              program.execute("2");
              program.execute("2");
              program.execute("1");
              program.execute("1");
              program.execute("1");
              program.execute("0");
      
              program.execute("2");
              program.execute("1");
              program.execute("1");
      
              output = program.execute("1");
              if (output.contains("Hyundai Venue")) {
                  return wrong("You shouldn't print out a car if it is already rented!");
              }
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          private CheckResult wrong(String message) {
              db.closeConnection();
              return CheckResult.wrong(message);
          }
      
          private CheckResult correct() {
              db.closeConnection();
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/carsharing/menu/implementation/MenuEntryPoint.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.menu.AbstractMenuNode;
      import carsharing.menu.NavigationReturnNode;
      
      import java.util.Map;
      
      public final class MenuEntryPoint extends AbstractMenuNode
      {
          public MenuEntryPoint(Map<String, String> args) {
              super(args);
              addMenuEntry(new ExitNode());
              addMenuEntry(new LogInAsManagerNode(args));
          }
          @Override
          public void listActions() {
              for (int index = 1; index < menuNodes.size(); index++) {
                  AbstractMenuNode menuNode = menuNodes.get(index);
                  String description = null;
                  if (menuNode instanceof NavigationReturnNode) {
                      description = String.format("%d. %s", 0, menuNode.describeNode());
                  } else {
                      description = String.format("%d. %s", index, menuNode.describeNode());
                  }
                  System.out.println(description);
              }
              System.out.println("0. Exit");
          }
      
          @Override
          public String describeNode()
          {
              return "Root";
          }
      }
    learner_created: true
  - name: src/carsharing/menu/Menu.java
    visible: true
    text: |
      package carsharing.menu;
      
      import carsharing.menu.implementation.MenuEntryPoint;
      
      import java.util.Map;
      import java.util.Scanner;
      
      public final class Menu
      {
          private MenuEntryPoint entryPoint;
      
          public Menu(Map<String, String> args) {
              entryPoint = new MenuEntryPoint(args);
          }
      
          public void run() {
              AbstractMenuNode currentNode = entryPoint;
              while (true) {
                  currentNode.update();
                  if (currentNode.isLeaf()) {
                      currentNode = currentNode.performAction();
                  } else {
                      currentNode.listActions();
                      Integer index = readInput();
                      currentNode = currentNode.chooseAction(index);
                  }
              }
          }
      
          private Integer readInput() {
              Scanner scanner = new Scanner(System.in);
              return Integer.parseInt(scanner.nextLine());
          }
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/CreateCarNode.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.commons.Company;
      import carsharing.menu.AbstractMenuNode;
      import carsharing.persistence.company.CarDao;
      import carsharing.persistence.company.implementation.CarDaoImpl;
      
      import java.util.Map;
      import java.util.Scanner;
      
      public class CreateCarNode extends AbstractMenuNode
      {
      
          private Company company;
      
          public CreateCarNode(Map<String, String> args, Company company) {
              super(args);
              this.company = company;
          }
      
          @Override
          public AbstractMenuNode performAction()
          {
              System.out.println("Enter the car name:");
              Scanner scanner = new Scanner(System.in);
              String name = scanner.nextLine();
              CarDao dao = new CarDaoImpl();
              dao.createCar(args, name, company.getId());
              return parent;
          }
      
          @Override
          public String describeNode()
          {
              return "Create a car";
          }
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/ExitNode.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.menu.AbstractMenuNode;
      import carsharing.menu.NavigationReturnNode;
      
      import java.util.List;
      
      public class ExitNode extends AbstractMenuNode implements NavigationReturnNode
      {
      
          @Override
          public AbstractMenuNode performAction()
          {
               System.exit(0);
               return null;
          }
      
          @Override
          public String describeNode()
          {
              return "Exit";
          }
      }
    learner_created: true
  - name: src/carsharing/utils/CompanyTableCreator.java
    visible: true
    text: |
      package carsharing.utils;
      
      import java.sql.*;
      import java.util.Map;
      import java.util.logging.Logger;
      
      public class CompanyTableCreator implements DatabaseManipulator
      {
          private static final Logger LOGGER = Logger.getLogger(CompanyTableCreator.class.getName());
      
          private static final String QUERY_TABLE_EXISTS = "SELECT TABLE_NAME FROM " +
                  "information_schema.TABLES " +
                  "WHERE TABLE_NAME = 'COMPANY';";
          private static final String CREATE_COMPANY_TABLE = "CREATE TABLE COMPANY (" +
                  "ID INT, " +
                  "NAME VARCHAR(50));";
          public static void createCompanyTable(Map<String, String> args) {
              if (checkIfTableExists(args)) {
                  LOGGER.info("Company table already exists");
                  return;
              }
      
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                      Statement statement = conn.createStatement()) {
                      LOGGER.info("Creating company table");
                      statement.execute(CREATE_COMPANY_TABLE);
                      LOGGER.info("Company table created") ;
                  } catch (SQLException sqlException) {
                      sqlException.printStackTrace();
                  }
      
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
          }
      
          private static boolean checkIfTableExists(Map<String, String> args) {
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(QUERY_TABLE_EXISTS)) {
                      LOGGER.info("Checking if company table exists");
                      return statement.executeQuery().next();
                  } catch (SQLException sqlException) {
                      sqlException.printStackTrace();
                  }
      
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return false;
          }
      }
    learner_created: true
  - name: src/carsharing/utils/CarTableCreator.java
    visible: true
    text: |
      package carsharing.utils;
      
      import java.sql.*;
      import java.util.Map;
      import java.util.logging.Logger;
      
      public class CarTableCreator implements DatabaseManipulator
      {
      
          private static final Logger LOGGER = Logger.getLogger(CarTableCreator.class.getName());
      
          private static final String QUERY_TABLE_EXISTS = "SELECT TABLE_NAME FROM " +
                  "information_schema.TABLES " +
                  "WHERE TABLE_NAME = 'CAR';";
      
          private static final String CREATE_TABLE_CAR = "CREATE TABLE CAR (" +
                  "ID INT AUTO_INCREMENT PRIMARY KEY, " +
                  "NAME VARCHAR UNIQUE NOT NULL, " +
                  "COMPANY_ID INT NOT NULL," +
                  "FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID));";
      
          public static void createCarTable(Map<String, String> args) {
              if (carTableExists(args)) {
                  LOGGER.info("Car table already exists");
                  return;
              }
      
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       Statement statement = conn.createStatement()) {
                      LOGGER.info("Creating car table");
                      statement.execute(CREATE_TABLE_CAR);
                      LOGGER.info("Car table created") ;
                  } catch (SQLException sqlException) {
                      sqlException.printStackTrace();
                  }
      
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
          }
      
          private static boolean carTableExists(Map<String, String> args) {
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(QUERY_TABLE_EXISTS)) {
                      LOGGER.info("Checking if car table exists");
                      return statement.executeQuery().next() ;
                  } catch (SQLException sqlException) {
                      sqlException.printStackTrace();
                  }
      
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return false;
          }
      }
    learner_created: true
  - name: src/carsharing/persistence/company/implementation/CompanyDaoImpl.java
    visible: true
    text: |
      package carsharing.persistence.company.implementation;
      
      import carsharing.commons.Company;
      import carsharing.persistence.company.CompanyDao;
      import carsharing.utils.DatabaseManipulator;
      
      import java.security.cert.CertificateParsingException;
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      import java.util.logging.Logger;
      
      public class CompanyDaoImpl implements CompanyDao, DatabaseManipulator
      {
      
          private static final Logger LOGGER = Logger.getLogger(CompanyDaoImpl.class.getName());
      
          private static final String INSERT_INTO_COMPANY = "INSERT INTO COMPANY (name) VALUES (?);";
      
          private static final String GET_ALL_COMPANIES = "SELECT ID, NAME FROM COMPANY ORDER BY ID;";
      
          @Override
          public List<Company> getAllCompanies(Map<String, String> args)
          {
              List<Company> result = new ArrayList<>();
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(GET_ALL_COMPANIES)) {
                      LOGGER.info("Querying for all companies");
                      ResultSet resultSet = statement.executeQuery();
                      while (resultSet.next()) {
                          Company company = new Company();
                          company.setId(Integer.parseInt(resultSet.getString(1)));
                          company.setName(resultSet.getString(2));
                          result.add(company);
                      }
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return result;
          }
      
          @Override
          public Integer createCompany(Map<String, String> args, String name)
          {
              Integer affected = null;
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(INSERT_INTO_COMPANY)) {
                      statement.setString(1, name);
                      LOGGER.info("Inserting into company table");
                      affected = statement.executeUpdate();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return affected;
          }
      }
    learner_created: true
  - name: src/carsharing/commons/Car.java
    visible: true
    text: |
      package carsharing.commons;
      
      public class Car
      {
      
          private int id;
      
          private String name;
      
          private int companyId;
      
          public Car()
          {
          }
      
          public Car(int id, String name, int companyId)
          {
              this.id = id;
              this.name = name;
              this.companyId = companyId;
          }
      
          public int getId()
          {
              return id;
          }
      
          public void setId(int id)
          {
              this.id = id;
          }
      
          public String getName()
          {
              return name;
          }
      
          public void setName(String name)
          {
              this.name = name;
          }
      
          public int getCompanyId()
          {
              return companyId;
          }
      
          public void setCompanyId(int companyId)
          {
              this.companyId = companyId;
          }
      
          @Override
          public String toString()
          {
              return String.format("%d. %s", id, name);
          }
      }
    learner_created: true
  - name: src/carsharing/menu/AbstractMenuNode.java
    visible: true
    text: |
      package carsharing.menu;
      
      import carsharing.menu.implementation.MenuEntryPoint;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      
      public abstract class AbstractMenuNode
      {
          protected AbstractMenuNode parent;
      
          protected Map<String, String> args;
      
          protected final List<AbstractMenuNode> menuNodes = new ArrayList<>();
      
          protected String description;
      
          public AbstractMenuNode() {};
      
          public AbstractMenuNode(Map<String, String> args) {
              this.args = args;
          }
      
          public void listActions() {
              for (int index = 0; index < menuNodes.size(); index++) {
                  AbstractMenuNode menuNode = menuNodes.get(index);
                  String description = null;
                  if (menuNode instanceof NavigationReturnNode) {
                      description = String.format("%d. %s", 0, menuNode.describeNode());
                  } else {
                      description = String.format("%d. %s", index + 1, menuNode.describeNode());
                  }
                  System.out.println(description);
              }
              System.out.println("0. Back");
          }
      
          public AbstractMenuNode chooseAction(Integer i) {
              if (i == null || i < 0 || i > menuNodes.size()) {
                  System.out.println(i + " is not a valid action");
                  return getParent();
              } else if (i == 0 && !(this instanceof MenuEntryPoint)) {
                  return getParent();
              }
              return menuNodes.get((this instanceof MenuEntryPoint) ? i : i - 1);
          }
      
          public AbstractMenuNode performAction() {
              return this;
          }
      
          public abstract String describeNode();
      
          public void setParent(AbstractMenuNode parent)
          {
              this.parent = parent;
          }
      
          public AbstractMenuNode getParent() {
              return parent;
          }
      
          protected void addMenuEntry(AbstractMenuNode entry) {
              menuNodes.add(entry);
              menuNodes.get(menuNodes.size() - 1).setParent(this);
          }
      
          public boolean isLeaf() {
              return menuNodes.isEmpty();
          }
      
          public void update() {
      
          }
      
      }
    learner_created: true
  - name: src/carsharing/persistence/company/CarDao.java
    visible: true
    text: |
      package carsharing.persistence.company;
      
      import carsharing.commons.Car;
      
      import java.util.List;
      import java.util.Map;
      
      public interface CarDao
      {
          List<Car> getAllCarsForCompany(Map<String, String> args, int companyId);
      
          Integer createCar(Map<String, String> args, String name, int company);
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/CreateCompanyNode.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.menu.AbstractMenuNode;
      import carsharing.persistence.company.CompanyDao;
      import carsharing.persistence.company.implementation.CompanyDaoImpl;
      
      import java.util.Map;
      import java.util.Scanner;
      
      public class CreateCompanyNode extends AbstractMenuNode
      {
      
          public CreateCompanyNode(Map<String, String> args) {
              super(args);
          }
      
          @Override
          public AbstractMenuNode performAction() {
              System.out.println("Enter the company name:");
              Scanner scanner = new Scanner(System.in);
              String name = scanner.nextLine();
              CompanyDao dao = new CompanyDaoImpl();
              dao.createCompany(args, name);
              return parent;
          }
      
          @Override
          public String describeNode()
          {
              return "Create a company";
          }
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/ListCompanies.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.commons.Company;
      import carsharing.menu.AbstractMenuNode;
      import carsharing.persistence.company.CompanyDao;
      import carsharing.persistence.company.implementation.CompanyDaoImpl;
      
      import java.util.List;
      import java.util.Map;
      
      public class ListCompanies extends AbstractMenuNode
      {
      
          public ListCompanies(Map<String, String> args) {
              super(args);
          }
      
          @Override
          public void listActions()
          {
              System.out.println("Choose a company");
              super.listActions();
          }
      
          @Override
          public void update()
          {
              menuNodes.clear();
              CompanyDao dao = new CompanyDaoImpl();
              List<Company> companies = dao.getAllCompanies(args);
              for (Company company : companies) {
                  CompanyNode companyNode = new CompanyNode(args, company);
                  companyNode.setParent(this);
                  menuNodes.add(companyNode);
              }
          }
      
          @Override
          public AbstractMenuNode performAction()
          {
              System.out.println("The company list is empty!");
              return parent;
          }
      
          @Override
          public String describeNode()
          {
              return "Company list";
          }
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/ListCars.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.commons.Car;
      import carsharing.commons.Company;
      import carsharing.menu.AbstractMenuNode;
      import carsharing.persistence.company.CarDao;
      import carsharing.persistence.company.implementation.CarDaoImpl;
      
      import java.util.List;
      import java.util.Map;
      
      public class ListCars extends AbstractMenuNode
      {
      
          private Company company;
      
          public ListCars(Map<String, String> args, Company company) {
              super(args);
              this.company = company;
          }
          @Override
          public AbstractMenuNode performAction() {
              CarDao dao = new CarDaoImpl();
              List<Car> cars = dao.getAllCarsForCompany(args, company.getId());
              int index = 1;
              if (cars.isEmpty()) {
                  System.out.println("The car list is empty!");
              } else {
                  for(Car car : cars) {
                      System.out.println(String.format("%d. %s", index++, car.getName()));
                  }
              }
              System.out.println();
              return parent;
          }
          @Override
          public String describeNode()
          {
              return "Car list";
          }
      }
    learner_created: true
  - name: src/carsharing/utils/UpdateCompanyTable.java
    visible: true
    text: |
      package carsharing.utils;
      
      import java.sql.*;
      import java.util.Map;
      import java.util.logging.Logger;
      
      public class UpdateCompanyTable implements DatabaseManipulator
      {
      
          private static final Logger LOGGER = Logger.getLogger(UpdateCompanyTable.class.getName());
      
          private static final String QUERY_UPDATE_ALREADY_EXECUTED = "SELECT * FROM " +
                  "information_schema.table_constraints " +
                  "WHERE TABLE_NAME = 'COMPANY'; ";// +
                  //"AND constraint_type = 'PRIMARY_KEY';";
          private static final String UPDATE_COMPANY_TABLE_ID_AUTO_INCREMENT = "ALTER TABLE COMPANY " +
                  "ALTER ID INT AUTO_INCREMENT;";
      
          private static final String UPDATE_COMPANY_TABLE_ID_PK = "ALTER TABLE COMPANY " +
                  "ADD CONSTRAINT pk_id PRIMARY KEY (ID);";
          private static final String UPDATE_COMPANY_TABLE_NAME_NOTNULL = "ALTER TABLE COMPANY " +
                  "ALTER NAME VARCHAR(40) NOT NULL;";
      
          private static final String UPDATE_COMPANY_TABLE_NAME_UNIQUE = "ALTER TABLE COMPANY " +
                  "ADD UNIQUE (NAME);";
      
          public static void updateCompanyTable(Map<String, String> args) {
              if (checkIfContraintExists(args)) {
                  LOGGER.info("Company constraint already exist");
                  return;
              }
      
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                  Statement statement = conn.createStatement()) {
                      LOGGER.info("Making ID auto increment");
                      statement.execute(UPDATE_COMPANY_TABLE_ID_AUTO_INCREMENT);
                      LOGGER.info("ID is auto incremented");
      
                      LOGGER.info("Making ID primary key");
                      statement.execute(UPDATE_COMPANY_TABLE_ID_PK);
                      LOGGER.info("ID primary key");
      
                      LOGGER.info("Making NAME not null");
                      statement.execute(UPDATE_COMPANY_TABLE_NAME_NOTNULL);
                      LOGGER.info("Name is not null");
      
                      LOGGER.info("Making NAME unique");
                      statement.execute(UPDATE_COMPANY_TABLE_NAME_UNIQUE);
                      LOGGER.info("Name is unique");
      
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
          }
      
          private static boolean checkIfContraintExists(Map<String, String> args) {
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connection to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(QUERY_UPDATE_ALREADY_EXECUTED)) {
                      LOGGER.info("Checking if company constraint already exists");
                      ResultSet result = statement.executeQuery();
                      if (!result.next()) {
                          return false;
                      }
                      return "PK_ID".equals(result.getString(3));
                  } catch (SQLException sqlException) {
                      sqlException.printStackTrace();
                  }
      
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return false;
          }
      
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/LogInAsManagerNode.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.menu.AbstractMenuNode;
      
      import java.util.Map;
      
      public class LogInAsManagerNode extends AbstractMenuNode
      {
      
          public LogInAsManagerNode(Map<String, String> args) {
              super(args);
              addMenuEntry(new ListCompanies(args));
              addMenuEntry(new CreateCompanyNode(args));
          }
      
          @Override
          public String describeNode()
          {
              return "Log in as a manager";
          }
      }
    learner_created: true
  - name: src/carsharing/persistence/company/implementation/CarDaoImpl.java
    visible: true
    text: |
      package carsharing.persistence.company.implementation;
      
      import carsharing.commons.Car;
      import carsharing.persistence.company.CarDao;
      import carsharing.utils.DatabaseManipulator;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Map;
      import java.util.logging.Logger;
      
      public class CarDaoImpl implements CarDao, DatabaseManipulator
      {
          private static final Logger LOGGER = Logger.getLogger(CarDaoImpl.class.getName());
      
          private static final String GET_ALL_CARS = "SELECT * FROM CAR " +
                  "WHERE COMPANY_ID = ? " +
                  "ORDER BY ID;";
      
          private static final String CREATE_CAR = "INSERT INTO CAR (name, company_id) " +
                  "VALUES (?, ?);";
      
          @Override
          public List<Car> getAllCarsForCompany(Map<String, String> args, int companyId)
          {
              List<Car> result = new ArrayList<>();
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connecting to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(GET_ALL_CARS)) {
                      statement.setInt(1, companyId);
                      LOGGER.info("Querying for all cars");
                      ResultSet resultSet = statement.executeQuery();
                      while (resultSet.next()) {
                          Car car = new Car();
                          car.setId(Integer.parseInt(resultSet.getString(1)));
                          car.setName(resultSet.getString(2));
                          result.add(car);
                      }
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return result;
          }
      
          @Override
          public Integer createCar(Map<String, String> args, String name, int company)
          {
              Integer affected = null;
              try {
                  Class.forName(JDBC_DRIVER);
                  LOGGER.info("Connecting to database");
                  try (Connection conn = DriverManager.getConnection(DB_URL + args.get(DATABASE_FILE_NAME));
                       PreparedStatement statement = conn.prepareStatement(CREATE_CAR)) {
                      statement.setString(1, name);
                      statement.setInt(2, company);
                      LOGGER.info("Inserting into car table");
                      affected = statement.executeUpdate();
                  } catch (SQLException e) {
                      e.printStackTrace();
                  }
              } catch (ClassNotFoundException e) {
                  e.printStackTrace();
              }
              return affected;
          }
      }
    learner_created: true
  - name: src/carsharing/persistence/company/CompanyDao.java
    visible: true
    text: |
      package carsharing.persistence.company;
      
      import carsharing.commons.Company;
      
      import java.util.List;
      import java.util.Map;
      
      public interface CompanyDao
      {
          List<Company> getAllCompanies(Map<String, String> args);
      
          Integer createCompany(Map<String, String> args, String name);
      }
    learner_created: true
  - name: src/carsharing/utils/DatabaseManipulator.java
    visible: true
    text: |
      package carsharing.utils;
      
      public interface DatabaseManipulator
      {
          String JDBC_DRIVER = "org.h2.Driver";
      
          String DB_URL = "jdbc:h2:./src/carsharing/db/";
      
          String DATABASE_FILE_NAME = "databaseFileName";
      }
    learner_created: true
  - name: src/carsharing/menu/implementation/CompanyNode.java
    visible: true
    text: |
      package carsharing.menu.implementation;
      
      import carsharing.commons.Company;
      import carsharing.menu.AbstractMenuNode;
      
      import java.util.Map;
      
      public class CompanyNode extends AbstractMenuNode
      {
      
          private Company company;
      
          @Override
          public void listActions()
          {
              System.out.println(String.format("'%s' company", company.getName()));
              super.listActions();
          }
      
          public CompanyNode(Map<String, String> args, Company company) {
              super(args);
              this.company = company;
              addMenuEntry(new ListCars(args, company));
              addMenuEntry(new CreateCarNode(args, company));
          }
      
          @Override
          public String describeNode()
          {
              return company.getName();
          }
      
          @Override
          public AbstractMenuNode getParent() {
              return parent.getParent();
          }
      }
    learner_created: true
  - name: src/carsharing/commons/Company.java
    visible: true
    text: |
      package carsharing.commons;
      
      public class Company
      {
          private int id;
          private String name;
      
          public int getId()
          {
              return id;
          }
      
          public void setId(int id)
          {
              this.id = id;
          }
      
          public String getName()
          {
              return name;
          }
      
          public void setName(String name)
          {
              this.name = name;
          }
      
          @Override
          public String toString()
          {
              return String.format("%d. %s", id, name);
          }
      }
    learner_created: true
  - name: src/carsharing/menu/NavigationReturnNode.java
    visible: true
    text: |
      package carsharing.menu;
      
      public interface NavigationReturnNode
      {
      }
    learner_created: true
  - name: src/carsharing/utils/CustomerTableCreator.java
    visible: true
    learner_created: true
  - name: src/carsharing/db/carsharing.trace.db
    visible: true
    learner_created: true
  - name: src/carsharing/commons/Customer.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/LogInAsCustomerNode.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/CreateCustomerNode.java
    visible: true
    learner_created: true
  - name: src/carsharing/persistence/company/CustomerDao.java
    visible: true
    learner_created: true
  - name: src/carsharing/persistence/company/implementation/CustomerDaoImpl.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/CustomerNode.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/RentACarNode.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/ReturnRentedCar.java
    visible: true
    learner_created: true
  - name: src/carsharing/menu/implementation/RentedCarsNode.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 27 Jun 2022 15:38:15 UTC
record: -1
